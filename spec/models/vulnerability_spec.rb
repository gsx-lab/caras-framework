# Copyright 2017 Global Security Experts Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
require_relative '../app_helper'

RSpec.describe Vulnerability do
  let(:site) { create(:site) }
  let(:host) { create(:host, site: site) }
  let(:evidence) { create(:evidence, site: site, host: host) }
  let(:vulnerability) { create(:vulnerability, site: site) }

  describe 'validation' do
    subject { vulnerability }

    describe 'site' do
      it 'should not be nil' do
        vulnerability.site = nil
        is_expected.not_to be_valid
      end

      it 'should exist' do
        vulnerability.site_id = Site.maximum(:id) + 1
        is_expected.not_to be_valid
      end
    end

    describe 'severity' do
      it 'should be specific severity' do
        is_expected.to be_valid

        vulnerability.severity = :info
        is_expected.to be_valid
        vulnerability.severity = 'info'
        is_expected.to be_valid
        vulnerability.severity = 0
        is_expected.to be_valid

        vulnerability.severity = :low
        is_expected.to be_valid
        vulnerability.severity = 'low'
        is_expected.to be_valid
        vulnerability.severity = 10
        is_expected.to be_valid

        vulnerability.severity = :middle
        is_expected.to be_valid
        vulnerability.severity = 'middle'
        is_expected.to be_valid
        vulnerability.severity = 20
        is_expected.to be_valid

        vulnerability.severity = :high
        is_expected.to be_valid
        vulnerability.severity = 'high'
        is_expected.to be_valid
        vulnerability.severity = 30
        is_expected.to be_valid

        vulnerability.severity = :critical
        is_expected.to be_valid
        vulnerability.severity = 'critical'
        is_expected.to be_valid
        vulnerability.severity = 99
        is_expected.to be_valid

        expect { vulnerability.severity = :dangerous }.to raise_error ArgumentError
      end

      it 'should not be nil' do
        vulnerability.severity = nil
        is_expected.not_to be_valid
      end
    end

    describe 'name' do
      it 'should not be blank' do
        vulnerability.name = nil
        is_expected.not_to be_valid

        vulnerability.name = ''
        is_expected.not_to be_valid
      end
    end

    describe 'description' do
      it 'should not be blank' do
        vulnerability.description = nil
        is_expected.not_to be_valid

        vulnerability.description = ''
        is_expected.not_to be_valid
      end
    end
  end
end
